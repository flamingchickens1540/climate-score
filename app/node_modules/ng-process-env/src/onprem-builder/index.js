"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const architect_1 = require("@angular-devkit/architect");
const ts = require("typescript");
const ts_morph_1 = require("ts-morph");
const ast_1 = require("../utils/ast");
exports.default = (0, architect_1.createBuilder)((options, context) => __awaiter(void 0, void 0, void 0, function* () {
    context.reportStatus(`Executing my command "${options.environmentFile}"...`);
    const project = new ts_morph_1.Project({
        compilerOptions: { target: ts_morph_1.ScriptTarget.Latest }
    });
    const sourceFile = project.addSourceFileAtPath("./" + options.environmentFile);
    // get the object literal
    const additionalDataProp = sourceFile
        .getVariableDeclarationOrThrow("environment")
        .getInitializerIfKindOrThrow(ts.SyntaxKind.ObjectLiteralExpression)
        .getPropertyOrThrow("envVar");
    const additionalDataObjLit = additionalDataProp
        .getInitializerIfKindOrThrow(ts.SyntaxKind.ObjectLiteralExpression);
    const LOST_OF_VARS = [];
    additionalDataObjLit.getProperties()
        .forEach(c => {
        var _a;
        const propName = (_a = c.getSymbol()) === null || _a === void 0 ? void 0 : _a.getName();
        let toUpdate = false;
        if (c.getType().isBoolean()) {
            const _var = (0, ast_1.getBooleanFromProcess)(propName);
            if (_var !== ast_1.NO_ENV_VAR_OR_VALUE_IN_PROCESS) {
                toUpdate = true;
                LOST_OF_VARS.push(_var);
            }
        }
        else if (c.getType().isNumber()) {
            const _var = (0, ast_1.getNumberFromProcess)(propName);
            if (_var !== ast_1.NO_ENV_VAR_OR_VALUE_IN_PROCESS) {
                toUpdate = true;
                LOST_OF_VARS.push(_var);
            }
        }
        else if (c.getType().isString()) {
            const _var = (0, ast_1.getStringFromProcess)(propName);
            if (_var !== ast_1.NO_ENV_VAR_OR_VALUE_IN_PROCESS) {
                toUpdate = true;
                LOST_OF_VARS.push(_var);
            }
        }
        else if (c.getType().isNull() || c.getType().isUndefined()) {
            const _var = (0, ast_1.getAnyValueFromProcess)(propName);
            if (_var !== ast_1.NO_ENV_VAR_OR_VALUE_IN_PROCESS) {
                toUpdate = true;
                LOST_OF_VARS.push(_var);
            }
        }
        if (toUpdate) {
            c.remove();
        }
    });
    if (LOST_OF_VARS.length > 0) {
        additionalDataObjLit.addPropertyAssignments(LOST_OF_VARS);
    }
    sourceFile.saveSync();
    return { success: true };
}));
