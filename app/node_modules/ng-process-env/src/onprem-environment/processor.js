"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnvProcessor = void 0;
const constants_1 = require("./constants");
const fs = require("fs");
const path = require("path");
class EnvProcessor {
    constructor(options) {
        this.baseJson = {};
        this.baseFilePath = path.join(__dirname, "./");
        this.options = options;
    }
    fileReplace(path) {
        return {
            "replace": `${path}/environment.ts`,
            "with": `${path}/environment.${this.options.config}.ts`,
        };
    }
    ;
    lookForBaseJsonPathInNG(angularJson) {
        const configurations = Object.keys(angularJson.projects[this.options.project].architect.build.configurations);
        let envPath = "";
        configurations.some((configName) => {
            const config = angularJson.projects[this.options.project].architect.build.configurations[configName];
            if (config.hasOwnProperty("fileReplacements") && Array.isArray(config.fileReplacements)) {
                for (const element of config.fileReplacements) {
                    const repls = element.replace.split("/");
                    if (repls.pop() === "environment.ts") {
                        envPath = repls.join("/");
                        return true;
                    }
                }
            }
        });
        return envPath;
    }
    addFileReplacement(angular, envsPath) {
        const configName = this.options.config || constants_1.DEFAULT_CONFIG_NAME;
        constants_1.BUILDER_TARGET.options.environmentFile = `${envsPath}/environment.${this.options.config}.ts`;
        angular["projects"][this.options.project]["architect"][constants_1.BUILDER_COMMAND] = constants_1.BUILDER_TARGET;
        if (angular["projects"][this.options.project]["architect"]["build"].configurations.hasOwnProperty(configName)) {
            if (angular["projects"][this.options.project]["architect"]["build"].configurations[configName].hasOwnProperty("fileReplacements"))
                angular["projects"][this.options.project]["architect"]["build"].configurations[configName]["fileReplacements"].push(this.fileReplace(envsPath));
            else
                angular["projects"][this.options.project]["architect"]["build"].configurations[configName]["fileReplacements"] = [this.fileReplace(envsPath)];
        }
        else {
            angular["projects"][this.options.project]["architect"]["build"].configurations[configName] = {
                fileReplacements: [this.fileReplace(envsPath)]
            };
        }
        return angular;
    }
    mapEnvironmentVars() {
        const vars = Object.keys(process.env);
        vars.forEach((e) => {
            if (this.baseJson.hasOwnProperty(e)) {
                this.baseJson[e] = process.env[e];
            }
        });
    }
    updateJson() {
        console.log("this.baseJson", this.baseJson);
        fs.writeFileSync(this.baseFilePath, JSON.stringify(this.baseJson, null, 4), "utf8");
    }
}
exports.EnvProcessor = EnvProcessor;
