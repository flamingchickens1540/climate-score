"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.onpremEnvironment = void 0;
const schematics_1 = require("@angular-devkit/schematics");
const core_1 = require("@angular-devkit/core");
const processor_1 = require("./processor");
// import * as fs from "fs";
const ts = require("typescript");
const ast_1 = require("../utils/ast");
const interface_1 = require("@angular-devkit/schematics/src/tree/interface");
/**
 * Should create
 * @param _options
 */
function onpremEnvironment(_options) {
    return (tree, _context) => {
        // @ts-ignore
        let envsPath = "";
        _options.config = _options.config || "onprem";
        const processor = new processor_1.EnvProcessor(_options);
        _context.logger.info(`Project ${_options.project} will be updated`);
        if (tree.exists("angular.json")) {
            const angularStr = tree.read("angular.json").toString("utf-8");
            let angular = JSON.parse(angularStr);
            const projs = (Object.keys(angular["projects"]));
            if (!angular["projects"].hasOwnProperty(_options.project)) {
                _context.logger.error(`We can't find project ${_options.project} in your angular.json [${projs}]`);
                process.exit(2);
            }
            envsPath = processor.lookForBaseJsonPathInNG(angular);
            if (!envsPath) {
                _context.logger.error(`We not able to find the location of your \n
         environment.ts files. Project: ${_options.project} in your angular.json [${projs}] \n
         run command with --path property`);
                process.exit(2);
            }
            _context.logger.warn("Env File will be created at " + envsPath);
            angular = processor.addFileReplacement(angular, envsPath);
            tree.overwrite("angular.json", JSON.stringify(angular, null, "\t"));
        }
        else {
            console.error("can't find angular.json file", (0, core_1.normalize)(__dirname + "angular.json"));
        }
        let sourceText = tree.read(envsPath + "/environment.ts").toString("utf-8");
        let sourceFile = ts.createSourceFile(envsPath + "/environment.ts", sourceText, ts.ScriptTarget.Latest, true);
        let nodes = (0, ast_1.getSourceNodes)(sourceFile);
        const baseEnvironmentVars = (0, ast_1.getDefaultEnvironmentCode)(nodes);
        _context.logger.info("Original environment \n" + baseEnvironmentVars.getText());
        _options.path = (0, core_1.normalize)(envsPath + `/environment.${_options.config}.ts`);
        const source = (0, schematics_1.url)("./template");
        const transformedSource = (0, schematics_1.apply)(source, [
            (0, schematics_1.template)(Object.assign(Object.assign({}, _options), { environmentFilesMerger: () => baseEnvironmentVars.getText() })),
            (0, schematics_1.move)((0, core_1.normalize)(envsPath))
        ]);
        return (0, schematics_1.mergeWith)(transformedSource, interface_1.MergeStrategy.Overwrite)(tree, _context);
    };
}
exports.onpremEnvironment = onpremEnvironment;
