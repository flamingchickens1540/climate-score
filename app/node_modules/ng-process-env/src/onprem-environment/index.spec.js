"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular-devkit/schematics/testing");
const collectionPath = require.resolve("../collection.json");
const NUMBER_OF_SCAFFOLDED_FILES = 27;
describe("process-env", () => {
    let appTree;
    function getWorkspaceTree(appName = "may-app") {
        return __awaiter(this, void 0, void 0, function* () {
            const ngRunner = new testing_1.SchematicTestRunner("@schematics/angular", "");
            const workspaceOptions = {
                name: "workspace",
                newProjectRoot: "projects",
                version: "6.0.0",
            };
            const appOptions = {
                name: appName,
                inlineTemplate: false,
                routing: false,
                skipTests: false,
                skipPackageJson: false
            };
            appTree = yield ngRunner
                .runSchematicAsync("workspace", workspaceOptions)
                .toPromise();
            appTree = yield ngRunner
                .runSchematicAsync("application", appOptions, appTree)
                .toPromise();
            return appTree;
        });
    }
    it("works", () => __awaiter(void 0, void 0, void 0, function* () {
        const runner = new testing_1.SchematicTestRunner("schematics", collectionPath);
        const tree = yield runner
            .runSchematicAsync("ng-add", {}, yield getWorkspaceTree())
            .toPromise();
        expect(tree.files.length).toEqual(NUMBER_OF_SCAFFOLDED_FILES);
    }));
});
