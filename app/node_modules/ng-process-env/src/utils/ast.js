"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAnyValueFromProcess = exports.getStringFromProcess = exports.getNumberFromProcess = exports.getBooleanFromProcess = exports.getDefaultEnvironmentCode = exports.getSourceNodes = exports.NO_ENV_VAR_OR_VALUE_IN_PROCESS = void 0;
const ts = require("typescript");
const ts_morph_1 = require("ts-morph");
exports.NO_ENV_VAR_OR_VALUE_IN_PROCESS = "Property not part of the environment";
function getSourceNodes(sourceFile) {
    const nodes = [sourceFile];
    const result = [];
    while (nodes.length > 0) {
        const node = nodes.shift();
        if (node) {
            result.push(node);
            if (node.getChildCount(sourceFile) >= 0) {
                nodes.unshift(...node.getChildren());
            }
        }
    }
    return result;
}
exports.getSourceNodes = getSourceNodes;
/**
 * returns the node (JSON)
 * export const environment =
 * {
 *   production:false,
 *   otherProperty: value
 * }
 * @param nodes source of default environment.ts file
 */
function getDefaultEnvironmentCode(nodes) {
    const routeNodes = nodes
        .filter((n) => {
        if (n.kind === ts.SyntaxKind.VariableDeclaration) {
            const index = n.getChildren().findIndex(c => {
                return (c.kind === ts.SyntaxKind.Identifier && c.getText() === "environment");
            });
            if (index !== -1) {
                return true;
            }
        }
        return false;
    })
        .map((n) => {
        const arrNodes = n
            .getChildren()
            .filter(c => (c.kind == ts.SyntaxKind.ObjectLiteralExpression));
        return arrNodes[arrNodes.length - 1];
    })
        .map((n) => {
        const arrNodes = n
            .getChildren()
            .filter((n) => {
            return n.kind === ts.SyntaxKind.SyntaxList;
        });
        return arrNodes[arrNodes.length - 1];
    });
    return routeNodes[0];
}
exports.getDefaultEnvironmentCode = getDefaultEnvironmentCode;
/***
 * affects only on
 * "0", "1", "true" ,"false", "True", "False"
 * @param propName
 */
function getBooleanFromProcess(propName) {
    var _a;
    let envValue = "";
    if (!process.env.hasOwnProperty(propName) ||
        process.env[propName] === undefined) {
        return exports.NO_ENV_VAR_OR_VALUE_IN_PROCESS;
    }
    const processValue = (_a = process.env[propName]) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase();
    if (processValue === "0" || processValue === "false") {
        envValue = "false";
    }
    else if (processValue === "1" || processValue === "true") {
        envValue = "true";
    }
    if (envValue.length === 0) {
        return exports.NO_ENV_VAR_OR_VALUE_IN_PROCESS;
    }
    return {
        name: propName,
        initializer: (writer) => {
            ts_morph_1.Writers.assertion(envValue, "boolean")(writer);
        },
    };
}
exports.getBooleanFromProcess = getBooleanFromProcess;
function getNumberFromProcess(propName) {
    let envValue = 0;
    if (!process.env.hasOwnProperty(propName) ||
        process.env[propName] === undefined ||
        isNaN(process.env[propName])) {
        return exports.NO_ENV_VAR_OR_VALUE_IN_PROCESS;
    }
    envValue = parseInt(process.env[propName], 10);
    return {
        name: propName,
        initializer: (writer) => {
            ts_morph_1.Writers.assertion(envValue, "number")(writer);
        },
    };
}
exports.getNumberFromProcess = getNumberFromProcess;
function getStringFromProcess(propName) {
    let envValue = "";
    if (!process.env.hasOwnProperty(propName) || process.env[propName] === undefined) {
        return exports.NO_ENV_VAR_OR_VALUE_IN_PROCESS;
    }
    envValue = process.env[propName];
    return {
        name: propName,
        initializer: (writer) => {
            writer.quote(envValue);
        },
    };
}
exports.getStringFromProcess = getStringFromProcess;
function getAnyValueFromProcess(propName) {
    if (!process.env.hasOwnProperty(propName)) {
        return exports.NO_ENV_VAR_OR_VALUE_IN_PROCESS;
    }
    return {
        name: propName,
        initializer: (writer) => {
            writer.quote(process.env[propName]);
        },
    };
}
exports.getAnyValueFromProcess = getAnyValueFromProcess;
